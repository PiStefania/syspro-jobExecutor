Ονοματεπώνυμο: Στεφανία Πάτσου
Α.Μ.: 1115201400156

Μεταγλώττιση Προγράμματος: make

Εκτέλεση Προγράμματος: ./jobExecutor -d 'file' -w 'w' ή ./jobExecutor -w 'w' -d 'file' -w ή ./jobExecutor -d 'file'

Δοκιμή Προγράμματος:
-Το πρόγραμμα εκτελείται επιτυχώς για τον φάκελο datasets.
-Στον φάκελο 'bash_scripts' υπάρχουν υλοποιημένα τα bash scripts της εργασίας. Έχει ήδη εκτελεστεί chmod 777 στα συγκεκριμένα, οπότε και εκτελούνται κανονικά.
-Το πρόγραμμα έχει δοκιμαστεί επιτυχώς τόσο με relative, όσο και με absolute paths. Για την υποβολή, χρησιμοποιήθηκαν relative paths.

Δομές:
-index.h: περιέχει την δομή mapIndex η οποία περιέχει όλα τα έγγραφα, πόσα είναι, πόσες λέξεις είναι συνολικά αλλά και πόσοι χαρακτήρες είναι.
-invertedIndex.h: περιέχει 6 δομές. Την ρίζα του trie απ'όπου και ξεκινά το populate αλλά και το query. Τον κάθε κόμβο ενός trie (trieNode) το οποίο περιέχει τον χαρακτήρα, τον επόμενο κόμβο στο ίδιο επίπεδο, έναν δείκτη για την κεφαλή του επόμενου επιπέδου, την ουρά posting Lists και το αν είναι πρώτος χαρακτήρας της λέξης. Την ουρά κάθε επιπέδου η οποία έχει ένα αρχικό κόμβο και έναν δείκτη στο τελικό. Την κεφαλή ενός postingLists, το οποίο περιέχει το μέγεθος της λίστας αλλά και έναν δείκτη στον πρώτο κόμβο.Ακόμη, περιέχει τον κόμβο ενός postingLists ο οποίος έχει το όνομα του αρχείου από όπυ προήλθε η λέξη, το term  frequency, τον worker, μία δομή για τις γραμμές των εγγράφων και τον επόμενο κόμβο. Η δομή για τις γραμμές (linesArray) περιέχει έναν πίνακα από int και το μέγεθος της.
-maxcount.h/mincount.h: Η δομή τους είναι πανομοιότυπη αλλά χρησιμοποιείται για ξεχωριστούς σκοπούς. Περιέχει το όνομα του αρχείου και το term frequency της λέξης του query.
-search.h: περιέχει 3 δομές, μία για την καταγραφή του αρχείου,των γραμμών και των αριθμών των γραμμών για μία λεξη, μία για την δημιουργία πίνακα με την προηγούμενη δομή και τέλος μία δομή που περιέχει όλες τις ευρεθείσες γραμμές και το μέγεθος του συγκεκριμένου πίνακα από strings.
-variousMethods.h: περιέχει μία δομή για την καταγραφή όλων των paths από το 'docfile'.
-wc.h: περιέχει μία δομή για την καταγραφή από έναν worker, των χαρακτήρων, γραμμών και λέξεων που έχει διαβάσει συνολικά.
-worker.h: περιέχει μία δομή με πίνακα από mapIndex, η οποία χρησιμοποιείται για το populate του trie κάθε worker.

Αλγόριθμοι:
-search: για την αναζήτηση γραμμών, χρησιμοποίησα τις δομές του search.h. Η δομή στο invertedIndex.h για την καταγραφή των γραμμών, με βοήθησε αρκετά. Μέσω memcpy, κάνω append τις γραμμές στις οποίες μία λέξη έχει βρεθεί σε ένα ήδη δημιουργημένο κόμβο για το συγκεκριμένο αρχείο, αλλιώς δημιουργώ καινούριο κόμβο. Αυτό γίνεται για κάθε λέξη του query.
-wc: κάθε worker προσθέτει στην αντίστοιχη δομή του worker.h, από κάθε mapIndex τις αντίστοιχες πληροφορίες.
-maxcount/mincount: βρίσκω την λέξη μέσα στο trie, ελέγχω αν έχει postList και έπειτα για κάθε κόμβο του postingLists ελέγχω αν το τωρινό max/min είναι μικρότερο/μεγαλύτερο αντίστοιχα έτσι ώστε αν είναι να το αναθέσω στην καινούρια τιμή.
-exit: για την exit εντολή, απλά δημιουργώ ένα log αρχείο όταν είμαστε στην μεριά του παιδιού, και κάθε φορά που ένα query είναι επιτυχημένο, χρησιμοποιώ τις συναρτήσεις του exit.c για την καταγραφή τους στο αρχείο. Όταν το παιδί τελειώσει, κλείνω το αρχείο.

Main.c / worker.c / namedPipes.c
Τα συγκεκριμένα αρχεία καθορίζουν όλη την λειτουργικότητα των διεργασιών, πατέρα και παιδιών.
-main.c: Δημιουργεί, μέσω fork, w παιδιά, όσα και το όρισμα κατά την εκτέλεση του προγράμματος. Έπειτα αν το fork == 0, διαμοιράζει τα paths στα παιδιά, τα οποία με κατάλληλους υπολογισμούς, κάνουν populate στο δικό τους trie. Μετά την δημιουργία, αν είμαστε στον πατέρα, παίρνουμε γραμμές από το stdin και τις δίνουμε στην μεριά του server. Τα παιδιά παίρνουν την συγκεκριμένη γραμμή και μέσω αυτής, υπολογίζουν κατάλληλα τα query.
-worker.c: Το συγκεκριμένο αρχείο έχει σχέση με την δημιουργία και διαγραφή των namedPipes, την δημιουργία trie σε κάθε worker ενώ προετοιμάζει τις λειτουργικότητες των namedPipes.
-namedPipes.c: Υπάρχουν 2 κύριες συναρτήσεις, serverSide, clientSide. Η serverSide είτε γράφει μία γραμμή στους clients, είτε διαβάζει τα αποτελέσματα των clients. Τα συγκεκριμένα αποτελέσματα είναι σε μορφή string, το οποίο στέλνεται από κάθε worker με συγκεκριμένη δομή. Άρα, ο server αποκωδικοποιεί την φράση του κάθε worker, και ανάλογα με το query, υπολογίζει με το καθένα την τελική απάντηση. Η clientSide, περιμένει απλά να λάβει μία γραμμή από τον server/parent και μετά ανάλογα με τους υπολογισμούς της, στέλνει πίσω τα αποτελέσματα.

Bash scripts
-bashScriptTotal: υπολογίζει τον αριθμό των λέξεων που έχουν αναζητηθεί.
-bashScriptMost: βρίσκει την λέξη με τα περισσότερα paths.
-bashScriptLeast: βρίσκει την λέξη με τα λιγότερα paths.

Σημειώσεις:
-Το πρόγραμμα δουλεύει είτε για /query είτε για \query.
-Το πρόγραμμα δουλεύει και για relative και για absolute paths.
-Κατά την wc, τυχόν υπολοιπόμενες λέξεις παραλείπονται. Το ίδιο συμβαίνει και για την exit.
-Δεν γίνεται πολλαπλό write στην search οπότε για πολύ μεγάλα αρχεία, το πρόγραμμα πιθανόν να μην δουλεύει. Για μεγαλύτερο define του buf,υπάρχει κατάλληλη μεταβλητή.
-Η δημιουργία και η ανάγνωση των αρχείων γίνεται χωρίς NON_BLOCK στα named pipes.
-Για κάθε worker έχουν δημιουργηθεί 2 named pipes, ένα για να διαβάζει την γραμμή που του δίνει ο γονέας, και μία για να στέλνει σε αυτόν τα αποτελέσματα.
-Προσπάθησα να χειριστώ το σήμα SIGCHLD, αλλά χωρίς επιτυχία.